class Solution {
public:
    int lonilyestCity(int n, vector<vector<int>>& distEachCity,
                      int distanceThreshold) {
        int fewestReachableCity = -1;
        int fewestCount = n;

        for (int i = 0; i < n; i++) {
            int reachable = 0;
            for (int j = 0; j < n; j++) {
                if (i == j)
                    continue;
                else if (distEachCity[i][j] <= distanceThreshold) {
                    reachable++;
                }
            }
            if (reachable <= fewestCount) {
                fewestCount = reachable;
                fewestReachableCity= i;
            }
        }
        return fewestReachableCity;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        int vue= 1e9+7;
        vector<vector<int>> distEachCity(n, vector<int>(n, vue));
        for (int i = 0; i < n; i++) {
            distEachCity[i][i] = 0;
        }
        for (auto& c : edges) {

            int a = c[0];
            int b = c[1];
            int weight = c[2];
            distEachCity[a][b] = weight;
            distEachCity[b][a] = weight;
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    distEachCity[i][j] =
                        min(distEachCity[i][j],
                            distEachCity[i][k] + distEachCity[k][j]);
                }
            }
        }
        return lonilyestCity(n, distEachCity, distanceThreshold);
    }
};
